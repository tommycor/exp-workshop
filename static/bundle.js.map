{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/victor/index.js","src/scripts/components/collider.js","src/scripts/components/gravity.js","src/scripts/components/particle.js","src/scripts/components/scene.js","src/scripts/initialize.js","src/scripts/utils/config.js","src/scripts/utils/mapper.js","src/scripts/utils/raf.js","src/scripts/utils/transformer.js"],"names":[],"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","exports = module.exports = Victor;\n\n/**\n * # Victor - A JavaScript 2D vector class with methods for common vector operations\n */\n\n/**\n * Constructor. Will also work without the `new` keyword\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = Victor(42, 1337);\n *\n * @param {Number} x Value of the x axis\n * @param {Number} y Value of the y axis\n * @return {Victor}\n * @api public\n */\nfunction Victor (x, y) {\n\tif (!(this instanceof Victor)) {\n\t\treturn new Victor(x, y);\n\t}\n\n\t/**\n\t * The X axis\n\t *\n\t * ### Examples:\n\t *     var vec = new Victor.fromArray(42, 21);\n\t *\n\t *     vec.x;\n\t *     // => 42\n\t *\n\t * @api public\n\t */\n\tthis.x = x || 0;\n\n\t/**\n\t * The Y axis\n\t *\n\t * ### Examples:\n\t *     var vec = new Victor.fromArray(42, 21);\n\t *\n\t *     vec.y;\n\t *     // => 21\n\t *\n\t * @api public\n\t */\n\tthis.y = y || 0;\n};\n\n/**\n * # Static\n */\n\n/**\n * Creates a new instance from an array\n *\n * ### Examples:\n *     var vec = Victor.fromArray([42, 21]);\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromArray\n * @param {Array} array Array with the x and y values at index 0 and 1 respectively\n * @return {Victor} The new instance\n * @api public\n */\nVictor.fromArray = function (arr) {\n\treturn new Victor(arr[0] || 0, arr[1] || 0);\n};\n\n/**\n * Creates a new instance from an object\n *\n * ### Examples:\n *     var vec = Victor.fromObject({ x: 42, y: 21 });\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromObject\n * @param {Object} obj Object with the values for x and y\n * @return {Victor} The new instance\n * @api public\n */\nVictor.fromObject = function (obj) {\n\treturn new Victor(obj.x || 0, obj.y || 0);\n};\n\n/**\n * # Manipulation\n *\n * These functions are chainable.\n */\n\n/**\n * Adds another vector's X axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addX(vec2);\n *     vec1.toString();\n *     // => x:30, y:10\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addX = function (vec) {\n\tthis.x += vec.x;\n\treturn this;\n};\n\n/**\n * Adds another vector's Y axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addY(vec2);\n *     vec1.toString();\n *     // => x:10, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addY = function (vec) {\n\tthis.y += vec.y;\n\treturn this;\n};\n\n/**\n * Adds another vector to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.add(vec2);\n *     vec1.toString();\n *     // => x:30, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.add = function (vec) {\n\tthis.x += vec.x;\n\tthis.y += vec.y;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to both vector axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalar(2);\n *     vec.toString();\n *     // => x: 3, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalar = function (scalar) {\n\tthis.x += scalar;\n\tthis.y += scalar;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to the X axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarX(2);\n *     vec.toString();\n *     // => x: 3, y: 2\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalarX = function (scalar) {\n\tthis.x += scalar;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarY(2);\n *     vec.toString();\n *     // => x: 1, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalarY = function (scalar) {\n\tthis.y += scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the X axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractX(vec2);\n *     vec1.toString();\n *     // => x:80, y:50\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractX = function (vec) {\n\tthis.x -= vec.x;\n\treturn this;\n};\n\n/**\n * Subtracts the Y axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractY(vec2);\n *     vec1.toString();\n *     // => x:100, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractY = function (vec) {\n\tthis.y -= vec.y;\n\treturn this;\n};\n\n/**\n * Subtracts another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtract(vec2);\n *     vec1.toString();\n *     // => x:80, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtract = function (vec) {\n\tthis.x -= vec.x;\n\tthis.y -= vec.y;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalar(20);\n *     vec.toString();\n *     // => x: 80, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalar = function (scalar) {\n\tthis.x -= scalar;\n\tthis.y -= scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarX(20);\n *     vec.toString();\n *     // => x: 80, y: 200\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalarX = function (scalar) {\n\tthis.x -= scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarY(20);\n *     vec.toString();\n *     // => x: 100, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalarY = function (scalar) {\n\tthis.y -= scalar;\n\treturn this;\n};\n\n/**\n * Divides the X axis by the x component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.divideX(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideX = function (vector) {\n\tthis.x /= vector.x;\n\treturn this;\n};\n\n/**\n * Divides the Y axis by the y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.divideY(vec2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideY = function (vector) {\n\tthis.y /= vector.y;\n\treturn this;\n};\n\n/**\n * Divides both vector axis by a axis values of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.divide(vec2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Victor} vector The vector to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divide = function (vector) {\n\tthis.x /= vector.x;\n\tthis.y /= vector.y;\n\treturn this;\n};\n\n/**\n * Divides both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalar(2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalar = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.x /= scalar;\n\t\tthis.y /= scalar;\n\t} else {\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t}\n\n\treturn this;\n};\n\n/**\n * Divides the X axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarX(2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalarX = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.x /= scalar;\n\t} else {\n\t\tthis.x = 0;\n\t}\n\treturn this;\n};\n\n/**\n * Divides the Y axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarY(2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalarY = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.y /= scalar;\n\t} else {\n\t\tthis.y = 0;\n\t}\n\treturn this;\n};\n\n/**\n * Inverts the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertX();\n *     vec.toString();\n *     // => x:-100, y:50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invertX = function () {\n\tthis.x *= -1;\n\treturn this;\n};\n\n/**\n * Inverts the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertY();\n *     vec.toString();\n *     // => x:100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invertY = function () {\n\tthis.y *= -1;\n\treturn this;\n};\n\n/**\n * Inverts both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invert();\n *     vec.toString();\n *     // => x:-100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invert = function () {\n\tthis.invertX();\n\tthis.invertY();\n\treturn this;\n};\n\n/**\n * Multiplies the X axis by X component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyX = function (vector) {\n\tthis.x *= vector.x;\n\treturn this;\n};\n\n/**\n * Multiplies the Y axis by Y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyY = function (vector) {\n\tthis.y *= vector.y;\n\treturn this;\n};\n\n/**\n * Multiplies both vector axis by values from a given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.multiply(vec2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Victor} vector The vector to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiply = function (vector) {\n\tthis.x *= vector.x;\n\tthis.y *= vector.y;\n\treturn this;\n};\n\n/**\n * Multiplies both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalar(2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Number} The scalar to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalar = function (scalar) {\n\tthis.x *= scalar;\n\tthis.y *= scalar;\n\treturn this;\n};\n\n/**\n * Multiplies the X axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarX(2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalarX = function (scalar) {\n\tthis.x *= scalar;\n\treturn this;\n};\n\n/**\n * Multiplies the Y axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarY(2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalarY = function (scalar) {\n\tthis.y *= scalar;\n\treturn this;\n};\n\n/**\n * Normalize\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.normalize = function () {\n\tvar length = this.length();\n\n\tif (length === 0) {\n\t\tthis.x = 1;\n\t\tthis.y = 0;\n\t} else {\n\t\tthis.divide(Victor(length, length));\n\t}\n\treturn this;\n};\n\nVictor.prototype.norm = Victor.prototype.normalize;\n\n/**\n * If the absolute vector axis is greater than `max`, multiplies the axis by `factor`\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.limit(80, 0.9);\n *     vec.toString();\n *     // => x:90, y:50\n *\n * @param {Number} max The maximum value for both x and y axis\n * @param {Number} factor Factor by which the axis are to be multiplied with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.limit = function (max, factor) {\n\tif (Math.abs(this.x) > max){ this.x *= factor; }\n\tif (Math.abs(this.y) > max){ this.y *= factor; }\n\treturn this;\n};\n\n/**\n * Randomizes both vector axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomize(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:67, y:73\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomize = function (topLeft, bottomRight) {\n\tthis.randomizeX(topLeft, bottomRight);\n\tthis.randomizeY(topLeft, bottomRight);\n\n\treturn this;\n};\n\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeX(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:55, y:50\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeX = function (topLeft, bottomRight) {\n\tvar min = Math.min(topLeft.x, bottomRight.x);\n\tvar max = Math.max(topLeft.x, bottomRight.x);\n\tthis.x = random(min, max);\n\treturn this;\n};\n\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeY(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:100, y:66\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeY = function (topLeft, bottomRight) {\n\tvar min = Math.min(topLeft.y, bottomRight.y);\n\tvar max = Math.max(topLeft.y, bottomRight.y);\n\tthis.y = random(min, max);\n\treturn this;\n};\n\n/**\n * Randomly randomizes either axis between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeAny(new Victor(50, 60), new Victor(70, 80));\n *     vec.toString();\n *     // => x:100, y:77\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeAny = function (topLeft, bottomRight) {\n\tif (!! Math.round(Math.random())) {\n\t\tthis.randomizeX(topLeft, bottomRight);\n\t} else {\n\t\tthis.randomizeY(topLeft, bottomRight);\n\t}\n\treturn this;\n};\n\n/**\n * Rounds both axis to an integer value\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.unfloat = function () {\n\tthis.x = Math.round(this.x);\n\tthis.y = Math.round(this.y);\n\treturn this;\n};\n\n/**\n * Rounds both axis to a certain precision\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @param {Number} Precision (default: 8)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.toFixed = function (precision) {\n\tif (typeof precision === 'undefined') { precision = 8; }\n\tthis.x = this.x.toFixed(precision);\n\tthis.y = this.y.toFixed(precision);\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation of the X axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixX(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:100\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mixX = function (vec, amount) {\n\tif (typeof amount === 'undefined') {\n\t\tamount = 0.5;\n\t}\n\n\tthis.x = (1 - amount) * this.x + amount * vec.x;\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation of the Y axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixY(vec2, 0.5);\n *     vec.toString();\n *     // => x:100, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mixY = function (vec, amount) {\n\tif (typeof amount === 'undefined') {\n\t\tamount = 0.5;\n\t}\n\n\tthis.y = (1 - amount) * this.y + amount * vec.y;\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mix(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mix = function (vec, amount) {\n\tthis.mixX(vec, amount);\n\tthis.mixY(vec, amount);\n\treturn this;\n};\n\n/**\n * # Products\n */\n\n/**\n * Creates a clone of this vector\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = vec1.clone();\n *\n *     vec2.toString();\n *     // => x:10, y:10\n *\n * @return {Victor} A clone of the vector\n * @api public\n */\nVictor.prototype.clone = function () {\n\treturn new Victor(this.x, this.y);\n};\n\n/**\n * Copies another vector's X component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyX(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:10\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copyX = function (vec) {\n\tthis.x = vec.x;\n\treturn this;\n};\n\n/**\n * Copies another vector's Y component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyY(vec1);\n *\n *     vec2.toString();\n *     // => x:10, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copyY = function (vec) {\n\tthis.y = vec.y;\n\treturn this;\n};\n\n/**\n * Copies another vector's X and Y components in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copy(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copy = function (vec) {\n\tthis.copyX(vec);\n\tthis.copyY(vec);\n\treturn this;\n};\n\n/**\n * Sets the vector to zero (0,0)\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *\t\t var1.zero();\n *     vec1.toString();\n *     // => x:0, y:0\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.zero = function () {\n\tthis.x = this.y = 0;\n\treturn this;\n};\n\n/**\n * Calculates the dot product of this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.dot(vec2);\n *     // => 23000\n *\n * @param {Victor} vector The second vector\n * @return {Number} Dot product\n * @api public\n */\nVictor.prototype.dot = function (vec2) {\n\treturn this.x * vec2.x + this.y * vec2.y;\n};\n\nVictor.prototype.cross = function (vec2) {\n\treturn (this.x * vec2.y ) - (this.y * vec2.x );\n};\n\n/**\n * Projects a vector onto another vector, setting itself to the result.\n *\n * ### Examples:\n *     var vec = new Victor(100, 0);\n *     var vec2 = new Victor(100, 100);\n *\n *     vec.projectOnto(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want to project this vector onto\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.projectOnto = function (vec2) {\n    var coeff = ( (this.x * vec2.x)+(this.y * vec2.y) ) / ((vec2.x*vec2.x)+(vec2.y*vec2.y));\n    this.x = coeff * vec2.x;\n    this.y = coeff * vec2.y;\n    return this;\n};\n\n\nVictor.prototype.horizontalAngle = function () {\n\treturn Math.atan2(this.y, this.x);\n};\n\nVictor.prototype.horizontalAngleDeg = function () {\n\treturn radian2degrees(this.horizontalAngle());\n};\n\nVictor.prototype.verticalAngle = function () {\n\treturn Math.atan2(this.x, this.y);\n};\n\nVictor.prototype.verticalAngleDeg = function () {\n\treturn radian2degrees(this.verticalAngle());\n};\n\nVictor.prototype.angle = Victor.prototype.horizontalAngle;\nVictor.prototype.angleDeg = Victor.prototype.horizontalAngleDeg;\nVictor.prototype.direction = Victor.prototype.horizontalAngle;\n\nVictor.prototype.rotate = function (angle) {\n\tvar nx = (this.x * Math.cos(angle)) - (this.y * Math.sin(angle));\n\tvar ny = (this.x * Math.sin(angle)) + (this.y * Math.cos(angle));\n\n\tthis.x = nx;\n\tthis.y = ny;\n\n\treturn this;\n};\n\nVictor.prototype.rotateDeg = function (angle) {\n\tangle = degrees2radian(angle);\n\treturn this.rotate(angle);\n};\n\nVictor.prototype.rotateTo = function(rotation) {\n\treturn this.rotate(rotation-this.angle());\n};\n\nVictor.prototype.rotateToDeg = function(rotation) {\n\trotation = degrees2radian(rotation);\n\treturn this.rotateTo(rotation);\n};\n\nVictor.prototype.rotateBy = function (rotation) {\n\tvar angle = this.angle() + rotation;\n\n\treturn this.rotate(angle);\n};\n\nVictor.prototype.rotateByDeg = function (rotation) {\n\trotation = degrees2radian(rotation);\n\treturn this.rotateBy(rotation);\n};\n\n/**\n * Calculates the distance of the X axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceX(vec2);\n *     // => -100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceX = function (vec) {\n\treturn this.x - vec.x;\n};\n\n/**\n * Same as `distanceX()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.absDistanceX(vec2);\n *     // => 100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\nVictor.prototype.absDistanceX = function (vec) {\n\treturn Math.abs(this.distanceX(vec));\n};\n\n/**\n * Calculates the distance of the Y axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => -10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceY = function (vec) {\n\treturn this.y - vec.y;\n};\n\n/**\n * Same as `distanceY()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => 10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\nVictor.prototype.absDistanceY = function (vec) {\n\treturn Math.abs(this.distanceY(vec));\n};\n\n/**\n * Calculates the euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distance(vec2);\n *     // => 100.4987562112089\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distance = function (vec) {\n\treturn Math.sqrt(this.distanceSq(vec));\n};\n\n/**\n * Calculates the squared euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceSq(vec2);\n *     // => 10100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceSq = function (vec) {\n\tvar dx = this.distanceX(vec),\n\t\tdy = this.distanceY(vec);\n\n\treturn dx * dx + dy * dy;\n};\n\n/**\n * Calculates the length or magnitude of the vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.length();\n *     // => 111.80339887498948\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\nVictor.prototype.length = function () {\n\treturn Math.sqrt(this.lengthSq());\n};\n\n/**\n * Squared length / magnitude\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.lengthSq();\n *     // => 12500\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\nVictor.prototype.lengthSq = function () {\n\treturn this.x * this.x + this.y * this.y;\n};\n\nVictor.prototype.magnitude = Victor.prototype.length;\n\n/**\n * Returns a true if vector is (0, 0)\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     vec.zero();\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\nVictor.prototype.isZero = function() {\n\treturn this.x === 0 && this.y === 0;\n};\n\n/**\n * Returns a true if this vector is the same as another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(100, 50);\n *     vec1.isEqualTo(vec2);\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\nVictor.prototype.isEqualTo = function(vec2) {\n\treturn this.x === vec2.x && this.y === vec2.y;\n};\n\n/**\n * # Utility Methods\n */\n\n/**\n * Returns an string representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toString();\n *     // => x:10, y:20\n *\n * @return {String}\n * @api public\n */\nVictor.prototype.toString = function () {\n\treturn 'x:' + this.x + ', y:' + this.y;\n};\n\n/**\n * Returns an array representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toArray();\n *     // => [10, 20]\n *\n * @return {Array}\n * @api public\n */\nVictor.prototype.toArray = function () {\n\treturn [ this.x, this.y ];\n};\n\n/**\n * Returns an object representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toObject();\n *     // => { x: 10, y: 20 }\n *\n * @return {Object}\n * @api public\n */\nVictor.prototype.toObject = function () {\n\treturn { x: this.x, y: this.y };\n};\n\n\nvar degrees = 180 / Math.PI;\n\nfunction random (min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction radian2degrees (rad) {\n\treturn rad * degrees;\n}\n\nfunction degrees2radian (deg) {\n\treturn deg / degrees;\n}\n","import Victor\t\tfrom 'victor';\r\n\r\nimport config \t\tfrom '../utils/config';\r\n\r\nmodule.exports = class Collider{\r\n\tconstructor() {\r\n\t\tconsole.log('Big badabim bada bada boum.');\r\n\t}\r\n\r\n\tupdate( particles ) {\r\n\t\tlet diff = null;\r\n\t\tlet dist = 0;\r\n\t\tlet director = null\r\n\t\tlet particle = null;\r\n\t\tlet other = null;\r\n\t\tlet force = 0;\r\n\t\tlet sumRadius = 0;\r\n\r\n\t\tfor( let i = 0 ; i < particles.length - 1 ; i++ ) {\r\n\t\t\tparticle = particles[i];\r\n\r\n\t\t\tfor( let j = i + 1 ; j < particles.length ; j++ ) {\r\n\t\t\t\tother = particles[j];\r\n\r\n\t\t\t\tdiff \t\t= particle.position.clone().subtract( other.position );\r\n\t\t\t\tdist \t\t= Math.abs( Math.sqrt( diff.x * diff.x + diff.y * diff.y ) );\r\n\t\t\t\tsumRadius \t= particle.radius + other.radius;\r\n\r\n\t\t\t\t// Don't collide, don't give a fuck\r\n\t\t\t\tif( dist > sumRadius ) { continue; }\r\n\r\n\t\t\t\tdirector \t= diff.divide( new Victor( dist, dist ) );\r\n\t\t\t\tforce \t\t= (sumRadius - dist) * .5;\r\n\r\n\t\t\t\t// if( force > 5) {\r\n\t\t\t\t// \tforce = 5;\r\n\t\t\t\t// }\r\n\r\n\t\t\t\tif( particle.isSelected ) {\r\n\t\t\t\t\tother.collision.add( director.multiply( new Victor( -force*2, -force*2 ) ) );\r\n\t\t\t\t}\r\n\t\t\t\telse if( other.isSelected ) {\r\n\t\t\t\t\tparticle.collision.add( director.clone().multiply( new Victor( force*2, force*2 ) ) );\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tparticle.collision.add( director.clone().multiply( new Victor( force, force ) ) );\r\n\t\t\t\t\tother.collision.add( director.multiply( new Victor( -force, -force ) ) );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}","import Victor\t\tfrom 'victor';\r\n\r\nimport config \t\tfrom '../utils/config';\r\n\r\nmodule.exports = class Gravity{\r\n\tconstructor() {\r\n\t\tconsole.log('May the force be with you.');\r\n\t}\r\n\r\n\tupdate( particle ) {\r\n\t\tif( particle.isSelected ) { return; }\r\n\t\tlet diff  = 0;\r\n\t\tlet dist  = 0;\r\n\t\tlet force = config.gravityForce;\r\n\t\tlet director = new Victor(0, 0);\r\n\r\n\t\tdist = Math.abs( Math.sqrt( particle.position.x * particle.position.x +  particle.position.y * particle.position.y  ) );\r\n\t\tdirector = particle.position.clone().divide( new Victor( dist, dist ) );\r\n\r\n\t\tparticle.gravity.add( director.multiply( new Victor( force, force ) ) );\r\n\t}\r\n}","import Victor \t\tfrom 'victor';\n\nimport raf \t  \t\tfrom '../utils/raf';\nimport transformer  from '../utils/transformer';\n\nmodule.exports = class Particle{\n\n\tconstructor(options) {\n\t\tthis.radius \t\t= options.radius\t\t!== void 0 ? options.radius\t\t\t: 10;\n\t\tthis.isActive\t\t= options.isActive\t\t!== void 0 ? options.isActive\t\t: true;\n\t\tthis.color\t\t\t= options.color\t\t\t!== void 0 ? options.color \t\t\t: 'rgb( 255, 255, 255 )';\n\t\tthis.el\t\t\t\t= options.el \t\t\t!== void 0 ? options.el \t\t\t: document.createElement('div');\n\t\tthis.position   \t= options.position\t\t!== void 0 ? options.position\t\t: new Victor( 0, 0);\n\t\tthis.container  \t= options.container\t\t!== void 0 ? options.container\t\t: document.querySelector('#container');\n\t\tthis.winHalfWidth \t= options.winHalfWidth\t!== void 0 ? options.winHalfWidth\t: window.innerWidth * .5;\n\t\tthis.winHalfHeight \t= options.winHalfHeight\t!== void 0 ? options.winHalfHeight\t: window.innerHeight * .5;\n\t\tthis.onSelected\t    = options.onSelected \t!==\tvoid 0 ? options.onSelected\t\t: function(){};\n\t\tthis.gravity\t\t= new Victor( 0, 0 );\n\t\tthis.collision \t\t= new Victor( 0, 0 );\n\t\tthis.force\t\t    = new Victor( 0, 0 );\n\n\t\tthis.scale \t\t\t= new Victor( this.radius * .02, this.radius * .02);\n\t\tthis.halfRadius\t\t= this.radius * .5;\n\t\tthis.isSelected \t= false;\n\n\t\tthis.update \t\t= this.update.bind(this);\n\t\tthis.resetForces    = this.resetForces.bind(this);\n\t\tthis.onMouseDown    = this.onMouseDown.bind(this);\n\n\n\t\tthis.el.addEventListener( 'mousedown', this.onMouseDown );\n\t}\n\n\tinit() {\n\t\tthis.el.classList.add('particle');\n\t\tconsole.log(this.color)\n\t\tthis.el.style.background = this.color;\n\t\tthis.container.appendChild( this.el );\n\n\t\tthis.update();\n\t}\n\n\tupdate() {\n\t\tthis.force = Victor( 0, 0);\n\n\t\tthis.force.add( this.gravity );\n\t\tthis.force.add( this.collision );\n\n\t\tthis.position.add( this.force );\n\n\t\ttransformer( this.el, 'translate3d(' + ( this.position.x - this.radius ) + 'px, ' + ( this.position.y - this.halfRadius ) + 'px, 0) scale(' + this.scale.x + ', ' + this.scale.y + ')' );\n\t}\n\n\tresetForces() {\n\t\tthis.gravity \t= new Victor(0, 0);\n\t\tthis.collision  = new Victor(0, 0);\n\t}\n\n\tonMouseDown() {\n\t\tthis.isSelected = true;\n\n\t\tthis.onSelected( this );\n\t}\n\n};","import Victor\t\tfrom 'victor';\n\nimport config \t\tfrom '../utils/config';\nimport raf \t\t\tfrom '../utils/raf';\nimport mapper \t\tfrom '../utils/mapper';\n\nimport Particle \tfrom './particle';\nimport Gravity \t\tfrom './gravity';\nimport Collider\t\tfrom './collider';\n\nmodule.exports = {\n\n\tinit: function() {\n\t\tthis.render \t= this.render.bind( this );\n\t\tthis.onSelected = this.onSelected.bind( this );\n\t\tthis.onMove \t= this.onMove.bind( this );\n\t\tthis.onResize \t= this.onResize.bind( this );\n\t\tthis.onMouseUp \t= this.onMouseUp.bind( this );\n\n\t\traf.register( this.render );\n\n\t\tthis.particles = new Array();\n\t\tthis.container = document.querySelector('#container');\n\n\t\tthis.onResize();\n\n\t\tfor( let i = 0 ; i < config.nbrParticles ; i++ ) {\n\t\t\tthis.particles.push( new Particle({\n\t\t\t\tradius: \t\t( Math.random() * 50 ) + 50,\n\t\t\t\tisActive: \t\ttrue,\n\t\t\t\tcolor: \t\t\t'rgb( ' + Math.floor(Math.random() * 100 + 155) + ', ' + Math.floor(Math.random() * 255) +', ' + Math.floor(Math.random() * 50) + ' )',\n\t\t\t\tposition: \t\tnew Victor( Math.random() * this.winWidth - this.halfWidth , Math.random() * this.winHeight - this.halfHeight ),\n\t\t\t\tcontainer: \t\tthis.container,\n\t\t\t\twinHalfWidth: \tthis.halfWidth,\n\t\t\t\twinHalfHeight: \tthis.halfHeight,\n\t\t\t\tonSelected: \tthis.onSelected\n\t\t\t}));\n\n\t\t\tthis.particles[i].init();\n\t\t}\n\n\t\tthis.gravity = new Gravity();\n\t\tthis.collider = new Collider();\n\n\t\traf.start();\n\t\twindow.addEventListener( 'resize', this.onResize );\n\t\twindow.addEventListener( 'mousemove', this.onMove );\n\t\twindow.addEventListener( 'mouseup', this.onMouseUp );\n\t},\n\n\tonClick: function( event ) {\n\t},\n\n\tonMove: function( event ) {\n\t\tif( this.selected == void 0 ) { return; }\n\n\t\tthis.selected.position.x = event.clientX - this.halfWidth;\n\t\tthis.selected.position.y = event.clientY - this.halfHeight;\n\t},\n\n\tonResize: function() {\n\t\tthis.winWidth\t= window.innerWidth;\n\t\tthis.winHeight\t= window.innerHeight;\n\n\t\tthis.halfWidth \t= this.winWidth  * .5;\n\t\tthis.halfHeight = this.winHeight * .5;\n\t},\n\n\tonSelected: function( particle ) {\n\t\tthis.selected = particle;\n\t},\n\n\tonMouseUp: function() {\n\t\tthis.selected.isSelected = false;\n\n\t\tthis.selected = null;\n\t},\n\n\trender: function() {\n\t\tfor( let i = 0 ; i < this.particles.length ; i++ ) {\n\t\t\tthis.particles[i].update();\n\t\t}\n\n\t\tfor( let i = 0 ; i < this.particles.length ; i++ ) {\n\t\t\tthis.particles[i].resetForces();\n\t\t\tthis.gravity.update( this.particles[i] );\n\t\t}\n\n\t\tthis.collider.update( this.particles );\n\t}\n\n};","import scene from './components/scene'\n\nwindow.onload = function() {\n\n\tscene.init();\n\n}\n","var config = {\n\tnbrParticles: 10,\n\tgravityForce: -2,\n\tcanvas: {\n\t\telement : document.getElementById('container'),\n\t\tcolor : 0x051023\n\t},\n}\n\n\nmodule.exports = config;","// https://github.com/tommycor/mapperJS/blob/master/mapper-min.js\nfunction mapper(val,oMin,oMax,nMin,nMax){return(((val-oMin)*(nMax-nMin))/(oMax-oMin))+(nMin);}\n\nmodule.exports = mapper;","function Raf() {\n\n\tthis.loop = this.loop.bind(this);\n\tthis.start = this.start.bind(this);\n\tthis.stop = this.stop.bind(this);\n\tthis.control = this.control.bind(this);\n\n\tthis.toRefresh = [];\n\n\twindow.addEventListener('keydown', this.control);\n\n}\n\nRaf.prototype.register = function( callback ) {\n\n\tthis.toRefresh.push(callback);\n\n}\n\nRaf.prototype.start = function() {\n\n\tthis.loop();\n\n}\n\nRaf.prototype.stop = function() {\n\n\tcancelAnimationFrame(this.request);\n\n}\n\nRaf.prototype.loop = function() {\n\n\tvar i;\n\tfor( i = 0 ; i < this.toRefresh.length ; i++ ) {\n\t\tthis.toRefresh[i]();\n\t}\n\n\tthis.request = requestAnimationFrame(this.start);\n\n}\n\nRaf.prototype.control = function(event) {\n\tif (event.keyCode === 0 || event.keyCode === 32) {\n\n\t\tif (this.request != null)\n\t\t\tthis.stop();\n\t\telse\n\t\t\tthis.start();\n\n\t}\n};\n\nmodule.exports = new Raf();\n\n\n\n\n\t\n","module.exports = function(el, value) {\r\n\tel.style.webkitTransform = value;\r\n\tel.style.mozTransform = value;\r\n\tel.style.msTransform = value;\r\n\tel.style.oTransform = value;\r\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}